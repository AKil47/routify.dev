---
published: 2020-06-21T11:45:06.574Z
author: jakobrosenberg
title: 1.8 beta - dev & production enhancements
summary: |
layout: blogpost
---

- [PWA & offline availability](#pwa-offline-availability)
- [Prefetching](#prefetching)
- [Preloading](#preloading)
- Bundling
- Nollup
- Roxi




### PWA, offline availability
Our 1.8 starter template comes with a service worker to cache all requests. Local and external.
By default, the entire app - excluding external assets - will be precached after the app has started. External assets are cached on request and considered fresh for 60 seconds. Beyond this duration, the stale cache is only used if the client is offline.

To try the 1.8 beta, open your terminal and type:
```bash
npx @sveltech/routify init --branch beta
```

To enable the service worker, uncomment it in `App.svelte`. The service worker can be configured in `src/sw.js`

Service workers will only work on `localhost` and secure connections. To avoid stale data when developing, use a direct address like `127.0.0.1` or set up dev domain like `dev.local` in your hosts configuration. Service workers can be cleared in `developer tools` -> `Application` -> `Clear storage`.


### Prefetching
The new `prefetch` helper lets you prefetch a page and all of its external assets. If you are using our service worker from the starter template, the request will be automatically cached. You can also configure your own caching strategies for external assets.

Prefetching provides a better experience for visitors with unstable connections. It can also alleviate slow APIs.

##### To prefetch a page and its external assets:
```javascript
<script>
  import { prefetch } from '@sveltech/routify'
  prefetch('/prefetch/this/page')
</script>
```

##### Prefetch can also be used in elements with `href` tags:
```html
<a use:prefetch>Page with data</a>
```

##### To cache the external assets for 24 hours:
```html
<a use:prefetch={{ validFor: 60 * 24 }}>Page with data</a>
```

<br />


Read more about prefetching here
- [How to use prefetching - wip](/guide/prefetching)
- [How it works - wip](/wip/prefetch-and-cache)

### Preloading
Preloads pages, but unlike prefetching, it does not prefetch external assets. If you want to manually handle how your app is cached, disable ``precacheAndRoute(files)`` in the service worker and instead use the preload helper to cache the components your want cached in the order you want them cached.

Preloading has no effect if the service worker is configured to cache everything.

To preload specific pages in specific order:
```javascript
import { routes } from '@sveltech/routify/tmp/routes'
routes
  //routes consists of the internal API. We want the public one
  .map(route => route.api)
  // we only want to preload components with custom metadata
  .filter(node => node.meta.preloadMePlz)
  // let's import the most important components first
  .sort((node, previousNode) => node.meta.myPriority - previousNode.meta.myPriority)
  // let's preload
  .forEach(node => node.preload())
```

---

abc
