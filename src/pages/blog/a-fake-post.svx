<!-- routify:options blogpost={
  "published": "2020-03-20T11:45:06.574Z",
  "author": "jakedk",
  "title": "A fake post",
  "summary": `Welcome to the all-new Routify blog. For our first post, we’re very
            happy to announce that 1.5 is finally ready. Among the highlights in
            this version are`
} -->


# Announcing v1.5.0

Welcome to the all-new Routify blog. This is not just the first post on Routify, but also my first blog post. Scary. For this cherry popping first post, we’re very happy to announce that 1.5 is finally ready. Among the highlights in this version are:

- [Support for meta tags](#meta-tags-and-open-graph)
- [Dynamic basepaths](#dynamic-basepaths)
- [Automatic navigation](#automatic-navigation-with-layout-and-page-helpers)
- [CLI enhancements](#cli-enhancements)
- [Query support](#query-support)
- [Improved starter template](#improved-starter-template)


### Meta tags and Open Graph

Set meta tags and Open Graph data directly from Routify, in a single line. For example this code...
``` javascript
import { metatags} from "@sveltech/routify";
$: metatags.title = ‘My app - home’;
```
will output the following:
``` html
<title>My app - home</title>
<meta name="title" content="My app - home" data-origin="routify">
<meta property="og:title" content="My app - home" data-origin="routify">
```
Read more about [meta tags](/guide/metadata)


### **Dynamic Basepaths**

Basepaths have been a long requested feature. They are strings but will be converted to RegExp’s internally.
``` svelte
<script>
  import { Router, basepath } from "@sveltech/routify";
  import { routes } from "@sveltech/routify/tmp/routes";
  $: $basepath = '/mybase'
</script>

<!-- src/App.svelte -->
<Router {routes} />
```
To prerender multiple basepaths add a basepath argument to your exporter.
```
    routify export --basepath mybase
```
Read more about [basepaths](/docs/basepath)


### **Automatic Navigation with Layout and Page Helpers**

With the new layout and page helpers you can read a file’s metadata or access its adjacent nodes.

Here’s an example of creating automatic navigation with a layout helper:
```svelte
<script>
  import { isActive, url, layout } from "@sveltech/routify";
</script>

<ul>
  {#each $layout.children as { path, title }}
    <li class:active={$isActive(path)}>
      <a href={$url(path)}>{title}</a>
    </li>
  {/each}
</ul>
```
You can also add extra links to the navigation by adding meta children to a layout.

Here’s an example from this website’s root layout, where we link to Github, Discord and Twitter.
```html
<!-- routify:options children=[
  {title: "Github", icon:"github", path: "//github.com/sveltech/routify"},
  {title: "Discord", icon:"discord", path: "//discord.gg/ntKJD5B"},
  {title: "Twitter", icon:"twitter", path: "//twitter.com/routifyjs"}
] -->
```
These meta children can be accessed in **$layout.children**.

Read more about [Automatic Navigation](/guide/navigation)


### **CLI Enhancements**

The init command now accepts `--branch --no-example --no-install and --start-dev`. If you are already used to Routify, this way you can get a starter template with a minimal amount of files.

### **Query Support**

**$params** now accepts query strings.

```javascript
$url('/blog/:id', {id: 123, theme: 'dark'} // blog/123?theme=dark

console.log($params) // **{id: 123, theme: ‘dark’}**
```


### Improved Starter Template
The starter template has received a lot of love and here are some of the improvements.

- **Faster first build** - Rollup and Routify are now run in parallel to improve performance on first dev build. Scripts in

- **Simplified scripts** - We have updated  **package.json** and the scripts should be both simpler and more flexible.

- **A unified __index.html** -  No more __dynamic.html and __bundle.html. From here on there's only one template to keep track of.

- **New Spassr server** - We've created our own server. It's intended for development, but should also work in production.
In the Starter template it serves two versions of your app. SPA on port 5000 and SSR on 5005.

- **Netlify + Github integration** - Go to your Netlify control panel and connect it to a Routify repo. You'll have continuous deployments in minutes, complete with SSR, prerended static pages and dynamic imports. When connecting your repo, remember to set root path to ``scripts/netlify`` and build script to ``npm run build``. That is all! :)

